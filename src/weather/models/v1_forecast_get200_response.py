# coding: utf-8

"""
Open-Meteo APIs

Open-Meteo offers free weather forecast APIs for open-source developers and non-commercial use. No API key is required.

The version of the OpenAPI document: 1.0
Contact: info@open-meteo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from weather.models.current_weather import CurrentWeather
from weather.models.daily_response import DailyResponse
from weather.models.hourly_response import HourlyResponse
from typing import Optional, Set
from typing_extensions import Self


class V1ForecastGet200Response(BaseModel):
    """
    V1ForecastGet200Response
    """  # noqa: E501

    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.",
    )
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.",
    )
    elevation: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The elevation in meters of the selected weather grid-cell. In mountain terrain it might differ from the location you would expect.",
    )
    generationtime_ms: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Generation time of the weather forecast in milli seconds. This is mainly used for performance monitoring and improvements.",
    )
    utc_offset_seconds: Optional[StrictInt] = Field(
        default=None, description="Applied timezone offset from the &timezone= parameter."
    )
    hourly: Optional[HourlyResponse] = None
    hourly_units: Optional[Dict[str, StrictStr]] = Field(
        default=None, description="For each selected weather variable, the unit will be listed here."
    )
    daily: Optional[DailyResponse] = None
    daily_units: Optional[Dict[str, StrictStr]] = Field(
        default=None, description="For each selected daily weather variable, the unit will be listed here."
    )
    current_weather: Optional[CurrentWeather] = None
    __properties: ClassVar[List[str]] = [
        "latitude",
        "longitude",
        "elevation",
        "generationtime_ms",
        "utc_offset_seconds",
        "hourly",
        "hourly_units",
        "daily",
        "daily_units",
        "current_weather",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ForecastGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hourly
        if self.hourly:
            _dict["hourly"] = self.hourly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of daily
        if self.daily:
            _dict["daily"] = self.daily.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_weather
        if self.current_weather:
            _dict["current_weather"] = self.current_weather.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ForecastGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "latitude": obj.get("latitude"),
                "longitude": obj.get("longitude"),
                "elevation": obj.get("elevation"),
                "generationtime_ms": obj.get("generationtime_ms"),
                "utc_offset_seconds": obj.get("utc_offset_seconds"),
                "hourly": HourlyResponse.from_dict(obj["hourly"]) if obj.get("hourly") is not None else None,
                "hourly_units": obj.get("hourly_units"),
                "daily": DailyResponse.from_dict(obj["daily"]) if obj.get("daily") is not None else None,
                "daily_units": obj.get("daily_units"),
                "current_weather": (
                    CurrentWeather.from_dict(obj["current_weather"]) if obj.get("current_weather") is not None else None
                ),
            }
        )
        return _obj
