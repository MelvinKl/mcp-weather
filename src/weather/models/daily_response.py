# coding: utf-8

"""
Open-Meteo APIs

Open-Meteo offers free weather forecast APIs for open-source developers and non-commercial use. No API key is required.

The version of the OpenAPI document: 1.0
Contact: info@open-meteo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class DailyResponse(BaseModel):
    """
    For each selected daily weather variable, data will be returned as a floating point array. Additionally a `time` array will be returned with ISO8601 timestamps.
    """  # noqa: E501

    time: List[StrictStr]
    temperature_2m_max: Optional[List[Union[StrictFloat, StrictInt]]] = None
    temperature_2m_min: Optional[List[Union[StrictFloat, StrictInt]]] = None
    apparent_temperature_max: Optional[List[Union[StrictFloat, StrictInt]]] = None
    apparent_temperature_min: Optional[List[Union[StrictFloat, StrictInt]]] = None
    precipitation_sum: Optional[List[Union[StrictFloat, StrictInt]]] = None
    precipitation_hours: Optional[List[Union[StrictFloat, StrictInt]]] = None
    weather_code: Optional[List[Union[StrictFloat, StrictInt]]] = None
    sunrise: Optional[List[Union[StrictFloat, StrictInt]]] = None
    sunset: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_speed_10m_max: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_gusts_10m_max: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_direction_10m_dominant: Optional[List[Union[StrictFloat, StrictInt]]] = None
    shortwave_radiation_sum: Optional[List[Union[StrictFloat, StrictInt]]] = None
    uv_index_max: Optional[List[Union[StrictFloat, StrictInt]]] = None
    uv_index_clear_sky_max: Optional[List[Union[StrictFloat, StrictInt]]] = None
    et0_fao_evapotranspiration: Optional[List[Union[StrictFloat, StrictInt]]] = None
    __properties: ClassVar[List[str]] = [
        "time",
        "temperature_2m_max",
        "temperature_2m_min",
        "apparent_temperature_max",
        "apparent_temperature_min",
        "precipitation_sum",
        "precipitation_hours",
        "weather_code",
        "sunrise",
        "sunset",
        "wind_speed_10m_max",
        "wind_gusts_10m_max",
        "wind_direction_10m_dominant",
        "shortwave_radiation_sum",
        "uv_index_max",
        "uv_index_clear_sky_max",
        "et0_fao_evapotranspiration",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DailyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DailyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "time": obj.get("time"),
                "temperature_2m_max": obj.get("temperature_2m_max"),
                "temperature_2m_min": obj.get("temperature_2m_min"),
                "apparent_temperature_max": obj.get("apparent_temperature_max"),
                "apparent_temperature_min": obj.get("apparent_temperature_min"),
                "precipitation_sum": obj.get("precipitation_sum"),
                "precipitation_hours": obj.get("precipitation_hours"),
                "weather_code": obj.get("weather_code"),
                "sunrise": obj.get("sunrise"),
                "sunset": obj.get("sunset"),
                "wind_speed_10m_max": obj.get("wind_speed_10m_max"),
                "wind_gusts_10m_max": obj.get("wind_gusts_10m_max"),
                "wind_direction_10m_dominant": obj.get("wind_direction_10m_dominant"),
                "shortwave_radiation_sum": obj.get("shortwave_radiation_sum"),
                "uv_index_max": obj.get("uv_index_max"),
                "uv_index_clear_sky_max": obj.get("uv_index_clear_sky_max"),
                "et0_fao_evapotranspiration": obj.get("et0_fao_evapotranspiration"),
            }
        )
        return _obj
