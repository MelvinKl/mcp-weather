# coding: utf-8

"""
Open-Meteo APIs

Open-Meteo offers free weather forecast APIs for open-source developers and non-commercial use. No API key is required.

The version of the OpenAPI document: 1.0
Contact: info@open-meteo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class HourlyResponse(BaseModel):
    """
    For each selected weather variable, data will be returned as a floating point array. Additionally a `time` array will be returned with ISO8601 timestamps.
    """  # noqa: E501

    time: List[StrictStr]
    temperature_2m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    relative_humidity_2m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    dew_point_2m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    apparent_temperature: Optional[List[Union[StrictFloat, StrictInt]]] = None
    pressure_msl: Optional[List[Union[StrictFloat, StrictInt]]] = None
    cloud_cover: Optional[List[Union[StrictFloat, StrictInt]]] = None
    cloud_cover_low: Optional[List[Union[StrictFloat, StrictInt]]] = None
    cloud_cover_mid: Optional[List[Union[StrictFloat, StrictInt]]] = None
    cloud_cover_high: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_speed_10m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_speed_80m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_speed_120m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_speed_180m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_direction_10m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_direction_80m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_direction_120m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_direction_180m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    wind_gusts_10m: Optional[List[Union[StrictFloat, StrictInt]]] = None
    shortwave_radiation: Optional[List[Union[StrictFloat, StrictInt]]] = None
    direct_radiation: Optional[List[Union[StrictFloat, StrictInt]]] = None
    direct_normal_irradiance: Optional[List[Union[StrictFloat, StrictInt]]] = None
    diffuse_radiation: Optional[List[Union[StrictFloat, StrictInt]]] = None
    vapour_pressure_deficit: Optional[List[Union[StrictFloat, StrictInt]]] = None
    evapotranspiration: Optional[List[Union[StrictFloat, StrictInt]]] = None
    precipitation: Optional[List[Union[StrictFloat, StrictInt]]] = None
    weather_code: Optional[List[Union[StrictFloat, StrictInt]]] = None
    snow_height: Optional[List[Union[StrictFloat, StrictInt]]] = None
    freezing_level_height: Optional[List[Union[StrictFloat, StrictInt]]] = None
    soil_temperature_0cm: Optional[List[Union[StrictFloat, StrictInt]]] = None
    soil_temperature_6cm: Optional[List[Union[StrictFloat, StrictInt]]] = None
    soil_temperature_18cm: Optional[List[Union[StrictFloat, StrictInt]]] = None
    soil_temperature_54cm: Optional[List[Union[StrictFloat, StrictInt]]] = None
    soil_moisture_0_1cm: Optional[List[Union[StrictFloat, StrictInt]]] = None
    soil_moisture_1_3cm: Optional[List[Union[StrictFloat, StrictInt]]] = None
    soil_moisture_3_9cm: Optional[List[Union[StrictFloat, StrictInt]]] = None
    soil_moisture_9_27cm: Optional[List[Union[StrictFloat, StrictInt]]] = None
    soil_moisture_27_81cm: Optional[List[Union[StrictFloat, StrictInt]]] = None
    __properties: ClassVar[List[str]] = [
        "time",
        "temperature_2m",
        "relative_humidity_2m",
        "dew_point_2m",
        "apparent_temperature",
        "pressure_msl",
        "cloud_cover",
        "cloud_cover_low",
        "cloud_cover_mid",
        "cloud_cover_high",
        "wind_speed_10m",
        "wind_speed_80m",
        "wind_speed_120m",
        "wind_speed_180m",
        "wind_direction_10m",
        "wind_direction_80m",
        "wind_direction_120m",
        "wind_direction_180m",
        "wind_gusts_10m",
        "shortwave_radiation",
        "direct_radiation",
        "direct_normal_irradiance",
        "diffuse_radiation",
        "vapour_pressure_deficit",
        "evapotranspiration",
        "precipitation",
        "weather_code",
        "snow_height",
        "freezing_level_height",
        "soil_temperature_0cm",
        "soil_temperature_6cm",
        "soil_temperature_18cm",
        "soil_temperature_54cm",
        "soil_moisture_0_1cm",
        "soil_moisture_1_3cm",
        "soil_moisture_3_9cm",
        "soil_moisture_9_27cm",
        "soil_moisture_27_81cm",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HourlyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HourlyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "time": obj.get("time"),
                "temperature_2m": obj.get("temperature_2m"),
                "relative_humidity_2m": obj.get("relative_humidity_2m"),
                "dew_point_2m": obj.get("dew_point_2m"),
                "apparent_temperature": obj.get("apparent_temperature"),
                "pressure_msl": obj.get("pressure_msl"),
                "cloud_cover": obj.get("cloud_cover"),
                "cloud_cover_low": obj.get("cloud_cover_low"),
                "cloud_cover_mid": obj.get("cloud_cover_mid"),
                "cloud_cover_high": obj.get("cloud_cover_high"),
                "wind_speed_10m": obj.get("wind_speed_10m"),
                "wind_speed_80m": obj.get("wind_speed_80m"),
                "wind_speed_120m": obj.get("wind_speed_120m"),
                "wind_speed_180m": obj.get("wind_speed_180m"),
                "wind_direction_10m": obj.get("wind_direction_10m"),
                "wind_direction_80m": obj.get("wind_direction_80m"),
                "wind_direction_120m": obj.get("wind_direction_120m"),
                "wind_direction_180m": obj.get("wind_direction_180m"),
                "wind_gusts_10m": obj.get("wind_gusts_10m"),
                "shortwave_radiation": obj.get("shortwave_radiation"),
                "direct_radiation": obj.get("direct_radiation"),
                "direct_normal_irradiance": obj.get("direct_normal_irradiance"),
                "diffuse_radiation": obj.get("diffuse_radiation"),
                "vapour_pressure_deficit": obj.get("vapour_pressure_deficit"),
                "evapotranspiration": obj.get("evapotranspiration"),
                "precipitation": obj.get("precipitation"),
                "weather_code": obj.get("weather_code"),
                "snow_height": obj.get("snow_height"),
                "freezing_level_height": obj.get("freezing_level_height"),
                "soil_temperature_0cm": obj.get("soil_temperature_0cm"),
                "soil_temperature_6cm": obj.get("soil_temperature_6cm"),
                "soil_temperature_18cm": obj.get("soil_temperature_18cm"),
                "soil_temperature_54cm": obj.get("soil_temperature_54cm"),
                "soil_moisture_0_1cm": obj.get("soil_moisture_0_1cm"),
                "soil_moisture_1_3cm": obj.get("soil_moisture_1_3cm"),
                "soil_moisture_3_9cm": obj.get("soil_moisture_3_9cm"),
                "soil_moisture_9_27cm": obj.get("soil_moisture_9_27cm"),
                "soil_moisture_27_81cm": obj.get("soil_moisture_27_81cm"),
            }
        )
        return _obj
