# coding: utf-8

"""
Open-Meteo APIs

Open-Meteo offers free weather forecast APIs for open-source developers and non-commercial use. No API key is required.

The version of the OpenAPI document: 1.0
Contact: info@open-meteo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from weather.models.v1_forecast_get200_response import V1ForecastGet200Response

from weather.api_client import ApiClient, RequestSerialized
from weather.api_response import ApiResponse
from weather.rest import RESTResponseType


class WeatherForecastAPIsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def v1_forecast_get(
        self,
        latitude: Annotated[Union[StrictFloat, StrictInt], Field(description="WGS84 coordinate")],
        longitude: Annotated[Union[StrictFloat, StrictInt], Field(description="WGS84 coordinate")],
        hourly: Optional[List[StrictStr]] = None,
        daily: Optional[List[StrictStr]] = None,
        current_weather: Optional[StrictBool] = None,
        temperature_unit: Optional[StrictStr] = None,
        wind_speed_unit: Optional[StrictStr] = None,
        timeformat: Annotated[
            Optional[StrictStr],
            Field(
                description="If format `unixtime` is selected, all time values are returned in UNIX epoch time in seconds. Please not that all time is then in GMT+0! For daily values with unix timestamp, please apply `utc_offset_seconds` again to get the correct date."
            ),
        ] = None,
        timezone: Annotated[
            Optional[StrictStr],
            Field(
                description="If `timezone` is set, all timestamps are returned as local-time and data is returned starting at 0:00 local-time. Any time zone name from the [time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) is supported."
            ),
        ] = None,
        past_days: Annotated[
            Optional[StrictInt],
            Field(description="If `past_days` is set, yesterdays or the day before yesterdays data are also returned."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> V1ForecastGet200Response:
        """7 day weather forecast for coordinates

        7 day weather variables in hourly and daily resolution for given WGS84 latitude and longitude coordinates. Available worldwide.

        :param latitude: WGS84 coordinate (required)
        :type latitude: float
        :param longitude: WGS84 coordinate (required)
        :type longitude: float
        :param hourly:
        :type hourly: List[str]
        :param daily:
        :type daily: List[str]
        :param current_weather:
        :type current_weather: bool
        :param temperature_unit:
        :type temperature_unit: str
        :param wind_speed_unit:
        :type wind_speed_unit: str
        :param timeformat: If format `unixtime` is selected, all time values are returned in UNIX epoch time in seconds. Please not that all time is then in GMT+0! For daily values with unix timestamp, please apply `utc_offset_seconds` again to get the correct date.
        :type timeformat: str
        :param timezone: If `timezone` is set, all timestamps are returned as local-time and data is returned starting at 0:00 local-time. Any time zone name from the [time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) is supported.
        :type timezone: str
        :param past_days: If `past_days` is set, yesterdays or the day before yesterdays data are also returned.
        :type past_days: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._v1_forecast_get_serialize(
            latitude=latitude,
            longitude=longitude,
            hourly=hourly,
            daily=daily,
            current_weather=current_weather,
            temperature_unit=temperature_unit,
            wind_speed_unit=wind_speed_unit,
            timeformat=timeformat,
            timezone=timezone,
            past_days=past_days,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "V1ForecastGet200Response",
            "400": "V1ForecastGet400Response",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def v1_forecast_get_with_http_info(
        self,
        latitude: Annotated[Union[StrictFloat, StrictInt], Field(description="WGS84 coordinate")],
        longitude: Annotated[Union[StrictFloat, StrictInt], Field(description="WGS84 coordinate")],
        hourly: Optional[List[StrictStr]] = None,
        daily: Optional[List[StrictStr]] = None,
        current_weather: Optional[StrictBool] = None,
        temperature_unit: Optional[StrictStr] = None,
        wind_speed_unit: Optional[StrictStr] = None,
        timeformat: Annotated[
            Optional[StrictStr],
            Field(
                description="If format `unixtime` is selected, all time values are returned in UNIX epoch time in seconds. Please not that all time is then in GMT+0! For daily values with unix timestamp, please apply `utc_offset_seconds` again to get the correct date."
            ),
        ] = None,
        timezone: Annotated[
            Optional[StrictStr],
            Field(
                description="If `timezone` is set, all timestamps are returned as local-time and data is returned starting at 0:00 local-time. Any time zone name from the [time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) is supported."
            ),
        ] = None,
        past_days: Annotated[
            Optional[StrictInt],
            Field(description="If `past_days` is set, yesterdays or the day before yesterdays data are also returned."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> ApiResponse[V1ForecastGet200Response]:
        """7 day weather forecast for coordinates

        7 day weather variables in hourly and daily resolution for given WGS84 latitude and longitude coordinates. Available worldwide.

        :param latitude: WGS84 coordinate (required)
        :type latitude: float
        :param longitude: WGS84 coordinate (required)
        :type longitude: float
        :param hourly:
        :type hourly: List[str]
        :param daily:
        :type daily: List[str]
        :param current_weather:
        :type current_weather: bool
        :param temperature_unit:
        :type temperature_unit: str
        :param wind_speed_unit:
        :type wind_speed_unit: str
        :param timeformat: If format `unixtime` is selected, all time values are returned in UNIX epoch time in seconds. Please not that all time is then in GMT+0! For daily values with unix timestamp, please apply `utc_offset_seconds` again to get the correct date.
        :type timeformat: str
        :param timezone: If `timezone` is set, all timestamps are returned as local-time and data is returned starting at 0:00 local-time. Any time zone name from the [time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) is supported.
        :type timezone: str
        :param past_days: If `past_days` is set, yesterdays or the day before yesterdays data are also returned.
        :type past_days: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._v1_forecast_get_serialize(
            latitude=latitude,
            longitude=longitude,
            hourly=hourly,
            daily=daily,
            current_weather=current_weather,
            temperature_unit=temperature_unit,
            wind_speed_unit=wind_speed_unit,
            timeformat=timeformat,
            timezone=timezone,
            past_days=past_days,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "V1ForecastGet200Response",
            "400": "V1ForecastGet400Response",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def v1_forecast_get_without_preload_content(
        self,
        latitude: Annotated[Union[StrictFloat, StrictInt], Field(description="WGS84 coordinate")],
        longitude: Annotated[Union[StrictFloat, StrictInt], Field(description="WGS84 coordinate")],
        hourly: Optional[List[StrictStr]] = None,
        daily: Optional[List[StrictStr]] = None,
        current_weather: Optional[StrictBool] = None,
        temperature_unit: Optional[StrictStr] = None,
        wind_speed_unit: Optional[StrictStr] = None,
        timeformat: Annotated[
            Optional[StrictStr],
            Field(
                description="If format `unixtime` is selected, all time values are returned in UNIX epoch time in seconds. Please not that all time is then in GMT+0! For daily values with unix timestamp, please apply `utc_offset_seconds` again to get the correct date."
            ),
        ] = None,
        timezone: Annotated[
            Optional[StrictStr],
            Field(
                description="If `timezone` is set, all timestamps are returned as local-time and data is returned starting at 0:00 local-time. Any time zone name from the [time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) is supported."
            ),
        ] = None,
        past_days: Annotated[
            Optional[StrictInt],
            Field(description="If `past_days` is set, yesterdays or the day before yesterdays data are also returned."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=1)] = 0,
    ) -> RESTResponseType:
        """7 day weather forecast for coordinates

        7 day weather variables in hourly and daily resolution for given WGS84 latitude and longitude coordinates. Available worldwide.

        :param latitude: WGS84 coordinate (required)
        :type latitude: float
        :param longitude: WGS84 coordinate (required)
        :type longitude: float
        :param hourly:
        :type hourly: List[str]
        :param daily:
        :type daily: List[str]
        :param current_weather:
        :type current_weather: bool
        :param temperature_unit:
        :type temperature_unit: str
        :param wind_speed_unit:
        :type wind_speed_unit: str
        :param timeformat: If format `unixtime` is selected, all time values are returned in UNIX epoch time in seconds. Please not that all time is then in GMT+0! For daily values with unix timestamp, please apply `utc_offset_seconds` again to get the correct date.
        :type timeformat: str
        :param timezone: If `timezone` is set, all timestamps are returned as local-time and data is returned starting at 0:00 local-time. Any time zone name from the [time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) is supported.
        :type timezone: str
        :param past_days: If `past_days` is set, yesterdays or the day before yesterdays data are also returned.
        :type past_days: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._v1_forecast_get_serialize(
            latitude=latitude,
            longitude=longitude,
            hourly=hourly,
            daily=daily,
            current_weather=current_weather,
            temperature_unit=temperature_unit,
            wind_speed_unit=wind_speed_unit,
            timeformat=timeformat,
            timezone=timezone,
            past_days=past_days,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "V1ForecastGet200Response",
            "400": "V1ForecastGet400Response",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _v1_forecast_get_serialize(
        self,
        latitude,
        longitude,
        hourly,
        daily,
        current_weather,
        temperature_unit,
        wind_speed_unit,
        timeformat,
        timezone,
        past_days,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _hosts = ["https://api.open-meteo.com"]
        _host = _hosts[_host_index]

        _collection_formats: Dict[str, str] = {
            "hourly": "csv",
            "daily": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if hourly is not None:

            _query_params.append(("hourly", hourly))

        if daily is not None:

            _query_params.append(("daily", daily))

        if latitude is not None:

            _query_params.append(("latitude", latitude))

        if longitude is not None:

            _query_params.append(("longitude", longitude))

        if current_weather is not None:

            _query_params.append(("current_weather", current_weather))

        if temperature_unit is not None:

            _query_params.append(("temperature_unit", temperature_unit))

        if wind_speed_unit is not None:

            _query_params.append(("wind_speed_unit", wind_speed_unit))

        if timeformat is not None:

            _query_params.append(("timeformat", timeformat))

        if timezone is not None:

            _query_params.append(("timezone", timezone))

        if past_days is not None:

            _query_params.append(("past_days", past_days))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/forecast",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
